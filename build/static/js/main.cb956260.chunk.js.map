{"version":3,"sources":["components/VideoRecorder.js","App.js","serviceWorker.js","index.js"],"names":["videoType","VideoRecorder","props","initiateRecording","a","navigator","mediaDevices","getUserMedia","video","audio","stream","srcObject","play","mediaRecorder","MediaRecorder","chunks","ondataavailable","e","data","size","push","startRecording","preventDefault","start","setState","recording","canSend","stopRecording","stop","saveVideo","restartRecording","videoURL","blob","Blob","type","window","URL","createObjectURL","videoDisplay","state","CardActionArea","src","autoHide","seconds","order","style","width","height","ref","v","muted","displayButton","Button","color","onClick","submitVideo","className","tabIndex","href","download","uuid","url","location","formData","FormData","append","fetch","method","mode","body","then","res","visible","alertColor","alertMessage","alertIcon","catch","err","onDismiss","backdrop","bind","this","protocol","hostname","classes","Card","card","CardActions","Modal","isOpen","toggle","ModalBody","Alert","React","Component","withStyles","theme","maxWidth","App","Fragment","CssBaseline","Container","Boolean","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb956260.chunk.js","sourcesContent":["/* eslint-env browser */\nimport React from 'react';\nimport uuid from 'uuid';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Card, CardActionArea, CardActions, Button } from '@material-ui/core';\nimport { Alert, Modal, ModalBody } from 'reactstrap';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { Player, ControlBar, ForwardControl } from 'video-react';\nimport '../App.css';\n\nconst styles = theme =>({\n  card: {\n    maxWidth: '100%',\n  },\n});\n\n//const videoType = 'video/webm'; --if using mimetype in MediaRecorder\nconst videoType = 'video/mp4';\n\nclass VideoRecorder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recording: false,\n      canSend: false,\n      videoURL: null,\n      visible: false,\n      backdrop: 'static',\n      alertColor: '',\n      alertMessage: '',\n      alertIcon: ''\n      /*videos: []*/\n    };\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  componentDidMount() {\n    this.initiateRecording();\n    if (window.location.protocol === 'http:' && window.location.hostname !== 'localhost') {\n      window.location.protocol = 'https:';\n    }\n  }\n\n  initiateRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    // show it to user\n    this.video.srcObject = stream;\n    this.video.play();\n    // init recording\n    this.mediaRecorder = new MediaRecorder(stream/*, {\n      mimeType: videoType\n    }*/);\n    // init data storage for video chunks\n    this.chunks = [];\n    // listen for data from media recorder\n    this.mediaRecorder.ondataavailable = e => {\n      if (e.data && e.data.size > 0) {\n        this.chunks.push(e.data);\n      }\n    };\n  }\n\n  startRecording = async (e) => {\n    e.preventDefault();\n    // wipe old data chunks\n    this.chunks = [];\n    // start recorder with 10ms buffer\n    this.mediaRecorder.start(10);\n    // say that we're recording\n    await this.setState({ recording: true, canSend: false });\n  }\n\n  stopRecording = async (e) => {\n    e.preventDefault();\n    // stop the recorder\n    this.mediaRecorder.stop();\n    // say that we're not recording\n    await this.setState({ recording: false, canSend: true });\n    // save the video to memory\n    this.saveVideo();\n  }\n\n  restartRecording = () => {\n    this.initiateRecording();\n    this.setState({ recording: false, videoURL: null, canSend: false });\n  }\n\n  saveVideo = () => {\n    // convert saved chunks to blob\n    const blob = new Blob(this.chunks, {type: videoType});\n    // generate video url from blob\n    const videoURL = window.URL.createObjectURL(blob);\n    // append videoURL to list of saved videos for rendering\n    //const videos = this.state.videos.concat([videoURL]);\n    this.setState({ video: blob });\n    this.setState({ videoURL });\n    //console.log(videoURL, 'vidURL');\n    /*  convert blob to base64\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n\n    xhr.onload = () => {\n      var recoveredBlob = xhr.response;\n\n      var reader = new FileReader();\n\n      reader.onload = () => {\n        var blobAsDataUrl = reader.result;\n        this.setState({ videoURL: blobAsDataUrl });\n        console.log(blobAsDataUrl.type, 'bloburi');\n        console.log(this.state.videoURL);\n      };\n\n      reader.readAsDataURL(recoveredBlob);\n    };\n\n    xhr.open('GET', videoURL);\n    xhr.send();\n    */\n  }\n  \n  videoDisplay = () => {\n    if (this.state.videoURL != null) {\n      return (\n        <CardActionArea>\n          <Player>\n            <source src={this.state.videoURL} type=\"video/mp4\" />\n            <ControlBar autoHide={true}>\n              <ForwardControl seconds={5} order={3.1} />\n            </ControlBar>\n          </Player>\n        </CardActionArea>\n      )\n    } \n    else if (this.state.videoURL == null) {\n      return(\n        <CardActionArea>\n          <video\n            style={{width: '100%', height: '400'}}\n            ref={v => {\n              this.video = v;\n            }}\n            muted\n          >\n            Video stream not available.\n          </video>\n        </CardActionArea>\n      )\n    }\n  }\n\n  displayButton = () => {\n    if (this.state.canSend && (this.state.videoURL != null)) {\n      return (\n        <div>\n          <Button size=\"large\" color=\"primary\"\n            onClick={() => {\n              this.restartRecording();\n            }}\n          >\n            Restart Recording\n          </Button>\n          <Button size=\"large\" color=\"primary\"\n            onClick={() => {\n              this.submitVideo(this.state.video);\n            }}\n          >\n            Submit\n          </Button>\n          <a className=\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeLarge\" tabIndex=\"0\" type=\"button\" href={this.state.videoURL} download={uuid()+\".mp4\"}>\n            <span className=\"MuiButton-label\">Download</span>\n            <span className=\"MuiTouchRipple-root\"></span>\n          </a>\n        </div>\n      );\n    } \n    else if (this.state.videoURL == null) {\n      return (\n        (this.state.recording === false) ? \n          <Button size=\"large\" color=\"primary\" onClick={e => this.startRecording(e)}>\n            Start Recording\n          </Button> : \n          <Button size=\"large\" color=\"primary\" onClick={e => this.stopRecording(e)}>\n            Stop Recording\n          </Button>\n      )\n    }\n  }\n\n  submitVideo = (video) => {\n    //console.log(video, 'video');\n    var url = window.location.href+'single';\n    const formData = new FormData();\n    formData.append('profile', video, uuid() + '.mp4');\n\n    fetch(url, {\n      method: 'POST', // or 'PUT'\n      mode: 'no-cors',\n      body: formData\n    }).then(res => {\n      this.setState({ \n        visible: true, \n        alertColor: 'success', \n        alertMessage: 'CONGRATS! Your video has been uploaded.',\n        alertIcon: <CheckCircleIcon />,\n        canSend: false,\n        videoURL: null\n      })\n      this.initiateRecording();\n    }).catch(err => {\n      this.setState({ \n        visible: true, \n        alertColor: 'danger', \n        alertMessage: 'OOPS! Your video was not uploaded.',\n        alertIcon: <ErrorIcon />,\n        canSend: true,\n        videoURL: this.state.videoURL\n      })\n      return (\n        <CardActionArea>\n          <Player>\n            <source src={this.state.videoURL} />\n            <ControlBar autoHide={true}>\n              <ForwardControl seconds={5} order={3.1} />\n            </ControlBar>\n          </Player>\n        </CardActionArea>\n      )\n    });\n  }\n\n  onDismiss = () => {\n    this.setState({ \n      visible: false\n    });\n  }\n\n  render() {\n    //const { recording, videoURL } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <div className='row'>\n        <div className='mt-5 col-lg-6 offset-lg-3'>\n          <Card className={classes.card}>\n            {this.videoDisplay()}\n            <CardActions>\n              {this.displayButton()}\n            </CardActions>\n            <Modal className=\"modal-lg\" isOpen={this.state.visible} toggle={this.onDismiss} backdrop={this.state.backdrop}>\n              <ModalBody>\n                <Alert color={this.state.alertColor} isOpen={this.state.visible} toggle={this.onDismiss}>\n                  {this.state.alertIcon}\n                  {this.state.alertMessage}\n                </Alert>\n              </ModalBody>\n            </Modal>\n          </Card>\n          {/*console.log(videoURL)*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(VideoRecorder);","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\n\nimport VideoRecorder from './components/VideoRecorder';\nimport \"../node_modules/video-react/dist/video-react.css\";\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Container maxWidth=\"lg\">\n          <VideoRecorder />\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}